generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  // cuid2
  id          String        @id
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  sessions    Session[]
  scoreLedger ScoreBlock[]
  joinRequest JoinRequest[]
  archived    Boolean       @default(false)

  // which officer created this user
  createdByOfficer   Officer @relation("createdBy", fields: [createdByOfficerId], references: [id])
  createdByOfficerId String
}

model ScoreBlock {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  session   Session  @relation(fields: [sessionId], references: [id])
  sessionId Int
  score     Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  // Any extra individual data
  data      String
}

model Session {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  game       Game         @relation(fields: [gameId], references: [id])
  gameId     Int
  user       User[]
  // Any extra data that was sent with the session
  data       String
  // The score blocks associated with this session
  scoreBlock ScoreBlock[]
  // Whether the current session is active.
  active     Boolean

  // Which officer created this session, if any. if null, a game created it.
  createdByOfficer   Officer? @relation("createdBy", fields: [createdByOfficerId], references: [id])
  createdByOfficerId String?
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String

  // Whether the message was sent by an officer
  officer   Officer @relation(fields: [officerId], references: [id])
  officerId String
}

model JoinRequest {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    Int

  acknowledged Boolean @default(false)

  // not null if the join request was
  // cancelled before being acknowledged
  linkedJoinRequest LinkedJoinRequest? @relation

  // a fancier state that indicates that this was terminated
  // with no new join request; via admin action or otherwise
  terminated Boolean @default(false)

  // whether it was an officer, rather than the game, that
  // sent the join request
  forceSent   Officer? @relation(fields: [forceSentId], references: [id])
  forceSentId String?
}

model LinkedJoinRequest {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nextJoinRequest   JoinRequest @relation(fields: [nextJoinRequestId], references: [id])
  nextJoinRequestId Int         @unique

  @@id([nextJoinRequestId])
}

model Game {
  id           Int           @id @default(autoincrement())
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  // Sessions; only one can be "active" at a time.
  sessions     Session[]
  joinRequests JoinRequest[]
  // Amount of players this game takes. Leave null for unknown.
  playerCount  Int?
  // The token to use to authenticate the game.
  token        String

  // The officer that created this game
  createdByOfficer   Officer @relation("createdBy", fields: [createdByOfficerId], references: [id])
  createdByOfficerId String
}

// An "officer" is one who can use the biotrack panel.
model Officer {
  // cuid2
  id       String  @id
  // officer's name
  name     String  @unique
  // password; hashed
  password String
  // salt
  salt     String
  // whether the officer is an admin; i.e. it can manage other officers
  admin    Boolean @default(false)
  archived Boolean @default(false)

  sessions  OfficerSession[]
  forceSent JoinRequest[]
  messages  Message[]

  // creation information - officer to officer
  officersCreated       Officer[] @relation("createdBy")
  createdByOfficer      Officer?  @relation("createdBy", fields: [createdByOfficerId], references: [id])
  createdByOfficerId    String?
  createdByOrchestrator Boolean   @default(false)

  // creation information - game to officer
  gamesCreated Game[] @relation("createdBy")

  // creation information - session to officer
  sessionsCreated Session[] @relation("createdBy")

  // creation information - user to officer
  usersCreated User[] @relation("createdBy")
}

model OfficerSession {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  officer   Officer  @relation(fields: [officerId], references: [id])
  officerId String

  token     String   @unique
  expires   DateTime
  lastUsed  DateTime
  ip        String
  userAgent String
}
